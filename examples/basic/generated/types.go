// Code generated by TypeMUX. DO NOT EDIT.
package api

import (
	"time"
)

// User role enumeration
// Defines the different roles a user can have in the system
type UserRole int

const (
	// Administrator with full access
	UserRoleADMIN UserRole = 10
	// Regular user with limited access
	UserRoleUSER UserRole = 20
	// Guest user with read-only access
	UserRoleGUEST UserRole = 30
)

// Status enumeration for various entities
type Status int

const (
	StatusACTIVE   Status = 1
	StatusINACTIVE Status = 2
	StatusPENDING  Status = 3
)

// User entity representing a system user
type User struct {
	// Unique identifier for the user
	Id string `json:"id"`
	// Full name of the user
	Name string `json:"name"`
	// Email address for contact
	Email string `json:"email"`
	// User's age in years
	Age int32 `json:"age"`
	// Role assigned to the user
	Role UserRole `json:"role"`
	// Whether the user account is active
	IsActive bool `json:"isActive"`
	// Timestamp when the user was created
	CreatedAt time.Time `json:"createdAt"`
	// Custom tags for categorization
	Tags []string `json:"tags"`
	// Additional metadata key-value pairs
	Metadata map[string]string `json:"metadata"`
	// Internal database version (excluded from GraphQL and OpenAPI)
	DbVersion int32 `json:"dbVersion"`
	// Password hash (only in Protobuf for internal services)
	PasswordHash string `json:"passwordHash"`
}

type Post struct {
	Id          string    `json:"id"`
	Title       string    `json:"title"`
	Content     string    `json:"content"`
	AuthorId    string    `json:"authorId"`
	Status      Status    `json:"status"`
	PublishedAt time.Time `json:"publishedAt"`
	ViewCount   int64     `json:"viewCount"`
	Tags        []string  `json:"tags"`
}

type CreateUserRequest struct {
	Name  string   `json:"name"`
	Email string   `json:"email"`
	Role  UserRole `json:"role"`
}

type CreateUserResponse struct {
	User    User `json:"user"`
	Success bool `json:"success"`
}

type GetUserRequest struct {
	Id string `json:"id"`
}

type GetUserResponse struct {
	User User `json:"user"`
}

type ListUsersRequest struct {
	Limit  int32    `json:"limit"`
	Offset int32    `json:"offset"`
	Role   UserRole `json:"role"`
}

type ListUsersResponse struct {
	Users []User `json:"users"`
	Total int32  `json:"total"`
}

// User service for managing users
type UserService interface {
	// Create a new user
	CreateUser(input *CreateUserRequest) (*CreateUserResponse, error)
	// Get a user by ID
	GetUser(input *GetUserRequest) (*GetUserResponse, error)
	// List all users with pagination
	ListUsers(input *ListUsersRequest) (*ListUsersResponse, error)
	// Delete a user
	DeleteUser(input *GetUserRequest) (*GetUserResponse, error)
}

// Post service for managing blog posts
type PostService interface {
	// Create a new post
	CreatePost(input *Post) (*Post, error)
	// Get a post by ID
	GetPost(input *GetUserRequest) (*Post, error)
}
