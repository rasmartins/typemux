@typemux("1.0.0")

/// Orders namespace - uses types from users namespace and has its own User type
namespace com.example.orders

import "users.typemux"

enum OrderStatus {
    PENDING = 1
    CONFIRMED = 2
    SHIPPED = 3
    DELIVERED = 4
    CANCELLED = 5
}

/// User entity in orders namespace (different from com.example.users.User)
/// This represents a minimal user info stored with the order
type User {
    id: string = 1 @required
    displayName: string = 2 @required
}

/// Order entity that references User from another namespace
type Order {
    id: string = 1 @required
    orderNumber: string = 2 @required
    // Qualified reference to User from users namespace
    customer: com.example.users.User = 3 @required
    // Local User type (unqualified reference)
    processedBy: User = 4 @required
    status: OrderStatus = 5 @required
    totalAmount: float64 = 6 @required
    createdAt: timestamp = 7 @required
}

type CreateOrderRequest {
    userId: string @required
    items: []string @required
}

type CreateOrderResponse {
    order: Order @required
    success: bool @required
}

type GetOrderRequest {
    orderId: string @required
}

type GetOrderResponse {
    order: Order
}

/// Order management service
service OrderService {
    /// Create a new order
    rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse)
    @http.method(POST)
    @http.path("/api/v1/orders")
    @graphql(mutation)

    /// Get an order by ID
    rpc GetOrder(GetOrderRequest) returns (GetOrderResponse)
    @http.method(GET)
    @http.path("/api/v1/orders/{id}")
    @graphql(query)
}
