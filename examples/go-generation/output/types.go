// Code generated by TypeMUX. DO NOT EDIT.
package ecommerce

import (
	"time"
)

// Order status enumeration
type OrderStatus int

const (
	// Order is pending processing
	OrderStatusPENDING OrderStatus = 1
	// Order is being processed
	OrderStatusPROCESSING OrderStatus = 2
	// Order has been shipped
	OrderStatusSHIPPED OrderStatus = 3
	// Order has been delivered
	OrderStatusDELIVERED OrderStatus = 4
	// Order was cancelled
	OrderStatusCANCELLED OrderStatus = 5
)

// Product represents an item in the inventory
type Product struct {
	// Unique product identifier
	Id string `json:"id"`
	// Product name
	Name string `json:"name"`
	// Product description
	Description string `json:"description"`
	// Price in cents
	Price int64 `json:"price"`
	// Whether the product is in stock
	InStock bool `json:"inStock"`
	// Product categories
	Tags []string `json:"tags"`
	// Product metadata
	Attributes map[string]string `json:"attributes"`
	// Discount percentage (0-100)
	Discount float32 `json:"discount"`
}

// Order represents a customer purchase
type Order struct {
	// Unique order identifier
	Id string `json:"id"`
	// Customer ID who placed the order
	CustomerId string `json:"customerId"`
	// List of products in the order
	ProductIds []string `json:"productIds"`
	// Current order status
	Status OrderStatus `json:"status"`
	// Total order amount in cents
	TotalAmount int64 `json:"totalAmount"`
	// Order creation timestamp
	CreatedAt time.Time `json:"createdAt"`
	// Delivery address
	ShippingAddress string `json:"shippingAddress"`
}

// Credit card payment details
type CreditCard struct {
	CardNumber string `json:"cardNumber"`
	ExpiryDate string `json:"expiryDate"`
	Cvv        string `json:"cvv"`
}

// PayPal payment details
type PayPal struct {
	Email string `json:"email"`
}

type GetProductRequest struct {
	Id string `json:"id"`
}

type GetProductResponse struct {
	Product Product `json:"product"`
}

type ListProductsRequest struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListProductsResponse struct {
	Products []Product `json:"products"`
	Total    int32     `json:"total"`
}

type DeleteProductResponse struct {
	Success bool `json:"success"`
}

type GetOrderRequest struct {
	Id string `json:"id"`
}

type GetOrderResponse struct {
	Order Order `json:"order"`
}

// Payment method union type
type PaymentMethod interface {
	isPaymentMethod()
}

type PaymentMethodCreditCard struct {
	Value CreditCard `json:"value"`
}

func (PaymentMethodCreditCard) isPaymentMethod() {}

type PaymentMethodPayPal struct {
	Value PayPal `json:"value"`
}

func (PaymentMethodPayPal) isPaymentMethod() {}

// Product service for managing inventory
type ProductService interface {
	// Get a product by ID
	GetProduct(input *GetProductRequest) (*GetProductResponse, error)
	// List all products with pagination
	ListProducts(input *ListProductsRequest) (*ListProductsResponse, error)
	// Create a new product
	CreateProduct(input *Product) (*Product, error)
	// Update an existing product
	UpdateProduct(input *Product) (*Product, error)
	// Delete a product
	DeleteProduct(input *GetProductRequest) (*DeleteProductResponse, error)
}

// Order service for managing customer orders
type OrderService interface {
	// Create a new order
	CreateOrder(input *Order) (*Order, error)
	// Get an order by ID
	GetOrder(input *GetOrderRequest) (*GetOrderResponse, error)
}
