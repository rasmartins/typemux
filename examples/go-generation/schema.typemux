@typemux("1.0.0")

@go.package("ecommerce")
namespace example.go

/// Product represents an item in the inventory
type Product {
    /// Unique product identifier
    id: string
    /// Product name
    name: string
    /// Product description
    description: string
    /// Price in cents
    price: int64
    /// Whether the product is in stock
    inStock: bool
    /// Product categories
    tags: []string
    /// Product metadata
    attributes: map<string, string>
    /// Discount percentage (0-100)
    discount: float32
}

/// Order status enumeration
enum OrderStatus {
    /// Order is pending processing
    PENDING = 1
    /// Order is being processed
    PROCESSING = 2
    /// Order has been shipped
    SHIPPED = 3
    /// Order has been delivered
    DELIVERED = 4
    /// Order was cancelled
    CANCELLED = 5
}

/// Order represents a customer purchase
type Order {
    /// Unique order identifier
    id: string
    /// Customer ID who placed the order
    customerId: string
    /// List of products in the order
    productIds: []string
    /// Current order status
    status: OrderStatus
    /// Total order amount in cents
    totalAmount: int64
    /// Order creation timestamp
    createdAt: timestamp
    /// Delivery address
    shippingAddress: string
}

/// Payment method union type
union PaymentMethod {
    CreditCard
    PayPal
}

/// Credit card payment details
type CreditCard {
    cardNumber: string
    expiryDate: string
    cvv: string
}

/// PayPal payment details
type PayPal {
    email: string
}

/// Product service for managing inventory
service ProductService {
    /// Get a product by ID
    rpc GetProduct(GetProductRequest) returns (GetProductResponse)

    /// List all products with pagination
    rpc ListProducts(ListProductsRequest) returns (ListProductsResponse)

    /// Create a new product
    rpc CreateProduct(Product) returns (Product)

    /// Update an existing product
    rpc UpdateProduct(Product) returns (Product)

    /// Delete a product
    rpc DeleteProduct(GetProductRequest) returns (DeleteProductResponse)
}

/// Order service for managing customer orders
service OrderService {
    /// Create a new order
    rpc CreateOrder(Order) returns (Order)

    /// Get an order by ID
    rpc GetOrder(GetOrderRequest) returns (GetOrderResponse)
}

type GetProductRequest {
    id: string
}

type GetProductResponse {
    product: Product
}

type ListProductsRequest {
    limit: int32
    offset: int32
}

type ListProductsResponse {
    products: []Product
    total: int32
}

type DeleteProductResponse {
    success: bool
}

type GetOrderRequest {
    id: string
}

type GetOrderResponse {
    order: Order
}
