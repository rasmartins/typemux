// Code generated by TypeMUX. DO NOT EDIT.
package graphql

import (
	"time"
)

type UserStatus int

const (
	UserStatusACTIVE UserStatus = 0
	UserStatusINACTIVE UserStatus = 1
	UserStatusSUSPENDED UserStatus = 2
)

type CreateUserInput struct {
	Name string `json:"name"`
	Email string `json:"email"`
	Age int32 `json:"age"`
	Tags []string `json:"tags"`
}

type UpdateUserInput struct {
	Name string `json:"name"`
	Email string `json:"email"`
	Age int32 `json:"age"`
	Status UserStatus `json:"status"`
}

type User struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Email string `json:"email"`
	Age int32 `json:"age"`
	Status UserStatus `json:"status"`
	CreatedAt time.Time `json:"createdAt"`
	Tags []string `json:"tags"`
	IsVerified bool `json:"isVerified"`
}

type CreateUserResult struct {
	User User `json:"user"`
	Message string `json:"message"`
}

type Boolean struct {
	Value bool `json:"value"`
}

type GetUserRequest struct {
	Id string `json:"id"`
}

type ListUsersRequest struct {
	Limit int32 `json:"limit"`
	Offset int32 `json:"offset"`
	Status UserStatus `json:"status"`
}

type SearchUsersRequest struct {
	Query string `json:"query"`
}

type CreateUserRequest struct {
	Input CreateUserInput `json:"input"`
}

type UpdateUserRequest struct {
	Id string `json:"id"`
	Input UpdateUserInput `json:"input"`
}

type DeleteUserRequest struct {
	Id string `json:"id"`
}

type VerifyUserEmailRequest struct {
	UserId string `json:"userId"`
	Token string `json:"token"`
}

type GraphQLService interface {
	GetUser(input *GetUserRequest) (*User, error)
	ListUsers(input *ListUsersRequest) (*User, error)
	SearchUsers(input *SearchUsersRequest) (*User, error)
	CreateUser(input *CreateUserRequest) (*CreateUserResult, error)
	UpdateUser(input *UpdateUserRequest) (*User, error)
	DeleteUser(input *DeleteUserRequest) (*Boolean, error)
	VerifyUserEmail(input *VerifyUserEmailRequest) (*Boolean, error)
}

