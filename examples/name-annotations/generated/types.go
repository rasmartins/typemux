// Code generated by TypeMUX. DO NOT EDIT.
package api

import (
	"time"
)

type Status int

const (
	StatusACTIVE Status = 1
	StatusINACTIVE Status = 2
	StatusDELETED Status = 3
)

// User type with different names in each format:
// - Protobuf: UserV2
// - GraphQL: UserAccount
// - OpenAPI: UserProfile
// 
// This example uses LEADING annotations (before the type keyword)
type User struct {
	Id string `json:"id"`
	Username string `json:"username"`
	Email string `json:"email"`
	Status Status `json:"status"`
	CreatedAt time.Time `json:"createdAt"`
}

// Product type with custom Protobuf name for versioning
// This example uses TRAILING annotation (after the type name)
type Product struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Price float64 `json:"price"`
}

type GetUserRequest struct {
	UserId string `json:"userId"`
}

type GetUserResponse struct {
	User User `json:"user"`
	Success bool `json:"success"`
}

type CreateProductRequest struct {
	Name string `json:"name"`
	Price float64 `json:"price"`
}

type CreateProductResponse struct {
	Product Product `json:"product"`
}

// User service demonstrating name annotations
type UserService interface {
	// Get a user by ID
	GetUser(input *GetUserRequest) (*GetUserResponse, error)
	// Create a new product
	CreateProduct(input *CreateProductRequest) (*CreateProductResponse, error)
}

