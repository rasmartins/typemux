// Code generated by TypeMUX. DO NOT EDIT.
package chat

import (
	"time"
)

type Message struct {
	Id string `json:"id"`
	Content string `json:"content"`
	Sender string `json:"sender"`
	Timestamp time.Time `json:"timestamp"`
}

type MessageRequest struct {
	Content string `json:"content"`
	Sender string `json:"sender"`
}

type MessageQuery struct {
	MessageId string `json:"messageId"`
}

type Empty struct {
}

// Chat service with queries, mutations, and subscriptions
type ChatService interface {
	GetMessage(input *MessageQuery) (*Message, error)
	ListMessages(input *Empty) (*Message, error)
	SendMessage(input *MessageRequest) (*Message, error)
	DeleteMessage(input *MessageQuery) (*Empty, error)
	WatchMessages(input *Empty, stream chan *Message) error
	WatchMessagesBySender(input *MessageQuery, stream chan *Message) error
}

