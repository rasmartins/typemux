{
  "Namespace": {
    "prefix": "namespace",
    "body": [
      "namespace ${1:com.example.api}"
    ],
    "description": "Declare a namespace for the schema"
  },
  "Import": {
    "prefix": "import",
    "body": [
      "import \"${1:path/to/file.typemux}\""
    ],
    "description": "Import another TypeMux file"
  },
  "Enum": {
    "prefix": "enum",
    "body": [
      "enum ${1:Name} {",
      "\t${2:VALUE}",
      "}"
    ],
    "description": "Create an enum definition"
  },
  "Enum with Numbers": {
    "prefix": "enumnum",
    "body": [
      "enum ${1:Name} {",
      "\t${2:VALUE1} = ${3:1}",
      "\t${4:VALUE2} = ${5:2}",
      "}"
    ],
    "description": "Create an enum with custom numbers"
  },
  "Type": {
    "prefix": "type",
    "body": [
      "type ${1:Name} {",
      "\t${2:field}: ${3:string} @required",
      "}"
    ],
    "description": "Create a type definition"
  },
  "Union": {
    "prefix": "union",
    "body": [
      "union ${1:Name} {",
      "\t${2:TypeA}",
      "\t${3:TypeB}",
      "\t${4:TypeC}",
      "}"
    ],
    "description": "Create a union/oneOf definition"
  },
  "Type with Field Numbers": {
    "prefix": "typenum",
    "body": [
      "type ${1:Name} {",
      "\t${2:id}: ${3:string} = 1 @required",
      "\t${4:name}: ${5:string} = 2 @required",
      "}"
    ],
    "description": "Create a type with custom field numbers"
  },
  "Service": {
    "prefix": "service",
    "body": [
      "service ${1:ServiceName} {",
      "\trpc ${2:MethodName}(${3:Request}) returns (${4:Response})",
      "}"
    ],
    "description": "Create a service definition"
  },
  "RPC Method": {
    "prefix": "rpc",
    "body": [
      "rpc ${1:MethodName}(${2:Request}) returns (${3:Response})"
    ],
    "description": "Create an RPC method"
  },
  "Field": {
    "prefix": "field",
    "body": [
      "${1:name}: ${2:string}"
    ],
    "description": "Create a field"
  },
  "Field Required": {
    "prefix": "fieldreq",
    "body": [
      "${1:name}: ${2:string} @required"
    ],
    "description": "Create a required field"
  },
  "Field with Default": {
    "prefix": "fielddef",
    "body": [
      "${1:name}: ${2:bool} @default(${3:true})"
    ],
    "description": "Create a field with default value"
  },
  "Field with Number": {
    "prefix": "fieldnum",
    "body": [
      "${1:name}: ${2:string} = ${3:1} @required"
    ],
    "description": "Create a field with custom number"
  },
  "Array Field": {
    "prefix": "array",
    "body": [
      "${1:items}: []${2:string}"
    ],
    "description": "Create an array field"
  },
  "Map Field": {
    "prefix": "map",
    "body": [
      "${1:metadata}: map<${2:string}, ${3:string}>"
    ],
    "description": "Create a map field"
  },
  "Documentation Comment": {
    "prefix": "doc",
    "body": [
      "/// ${1:Description}"
    ],
    "description": "Add documentation comment"
  },
  "Multi-generator Documentation": {
    "prefix": "doct",
    "body": [
      "/// ${1:General description}",
      "/// @proto ${2:Protobuf-specific}",
      "/// @graphql ${3:GraphQL-specific}",
      "/// @openapi ${4:OpenAPI-specific}"
    ],
    "description": "Add multi-generator documentation"
  },
  "HTTP Annotation": {
    "prefix": "http",
    "body": [
      "@http(${1|GET,POST,PUT,DELETE,PATCH|}) @path(\"${2:/api/v1/resource}\")"
    ],
    "description": "Add HTTP method and path annotations"
  },
  "GraphQL Annotation": {
    "prefix": "graphql",
    "body": [
      "@graphql(${1|query,mutation,subscription|})"
    ],
    "description": "Add GraphQL operation type annotation"
  },
  "Exclude From": {
    "prefix": "exclude",
    "body": [
      "@exclude(${1|proto,graphql,openapi|})"
    ],
    "description": "Exclude field from specific generators"
  },
  "Only For": {
    "prefix": "only",
    "body": [
      "@only(${1|proto,graphql,openapi|})"
    ],
    "description": "Include field only in specific generators"
  },
  "Success Codes": {
    "prefix": "success",
    "body": [
      "@success(${1|201,202,204|})"
    ],
    "description": "Specify additional HTTP success codes for RPC method"
  },
  "Error Codes": {
    "prefix": "errors",
    "body": [
      "@errors(${1:400},${2:404},${3:500})"
    ],
    "description": "Specify expected HTTP error codes for RPC method"
  },
  "Complete Schema": {
    "prefix": "schema",
    "body": [
      "/// ${1:Description}",
      "namespace ${2:com.example.api}",
      "",
      "enum ${3:Status} {",
      "\tACTIVE = 1",
      "\tINACTIVE = 2",
      "}",
      "",
      "type ${4:Entity} {",
      "\tid: string = 1 @required",
      "\tname: string = 2 @required",
      "\tstatus: ${3:Status} = 3 @required",
      "\tcreatedAt: timestamp = 4 @required",
      "}",
      "",
      "type ${5:CreateRequest} {",
      "\tname: string @required",
      "}",
      "",
      "type ${6:CreateResponse} {",
      "\tentity: ${4:Entity} @required",
      "\tsuccess: bool @required",
      "}",
      "",
      "service ${7:EntityService} {",
      "\trpc Create${4:Entity}(${5:CreateRequest}) returns (${6:CreateResponse})",
      "}"
    ],
    "description": "Create a complete schema template"
  },
  "Proto Name Annotation": {
    "prefix": "protoname",
    "body": [
      "@proto.name(\"${1:CustomName}\")"
    ],
    "description": "Add Protobuf-specific name annotation"
  },
  "GraphQL Name Annotation": {
    "prefix": "graphqlname",
    "body": [
      "@graphql.name(\"${1:CustomName}\")"
    ],
    "description": "Add GraphQL-specific name annotation"
  },
  "OpenAPI Name Annotation": {
    "prefix": "openapiname",
    "body": [
      "@openapi.name(\"${1:CustomName}\")"
    ],
    "description": "Add OpenAPI-specific name annotation"
  },
  "Type with Leading Name Annotations": {
    "prefix": "typenames",
    "body": [
      "@proto.name(\"${1:ProtoName}\")",
      "@graphql.name(\"${2:GraphQLName}\")",
      "@openapi.name(\"${3:OpenAPIName}\")",
      "type ${4:Name} {",
      "\t${5:field}: ${6:string} @required",
      "}"
    ],
    "description": "Create a type with leading name annotations for all formats"
  },
  "Field with Leading Required": {
    "prefix": "fieldleading",
    "body": [
      "@required",
      "${1:name}: ${2:string}"
    ],
    "description": "Create a field with leading @required annotation"
  },
  "REST API Service": {
    "prefix": "restservice",
    "body": [
      "service ${1:EntityService} {",
      "\t/// Create a new ${2:entity}",
      "\trpc Create(${3:CreateRequest}) returns (${4:CreateResponse})",
      "\t\t@http(POST)",
      "\t\t@path(\"/api/v1/${5:entities}\")",
      "\t\t@graphql(mutation)",
      "\t\t@success(201)",
      "\t\t@errors(400,409,500)",
      "",
      "\t/// Get ${2:entity} by ID",
      "\trpc Get(${6:GetRequest}) returns (${7:GetResponse})",
      "\t\t@http(GET)",
      "\t\t@path(\"/api/v1/${5:entities}/{id}\")",
      "\t\t@graphql(query)",
      "\t\t@errors(404,500)",
      "",
      "\t/// Update ${2:entity}",
      "\trpc Update(${8:UpdateRequest}) returns (${9:UpdateResponse})",
      "\t\t@http(PUT)",
      "\t\t@path(\"/api/v1/${5:entities}/{id}\")",
      "\t\t@graphql(mutation)",
      "\t\t@errors(400,404,500)",
      "",
      "\t/// Delete ${2:entity}",
      "\trpc Delete(${10:DeleteRequest}) returns (${11:DeleteResponse})",
      "\t\t@http(DELETE)",
      "\t\t@path(\"/api/v1/${5:entities}/{id}\")",
      "\t\t@graphql(mutation)",
      "\t\t@success(204)",
      "\t\t@errors(404,500)",
      "}"
    ],
    "description": "Create a complete REST API service with CRUD operations"
  },
  "GraphQL Service": {
    "prefix": "gqlservice",
    "body": [
      "service ${1:EntityService} {",
      "\t/// Query: Get ${2:entity} by ID",
      "\trpc Get${3:Entity}(${4:GetRequest}) returns (${5:GetResponse})",
      "\t\t@graphql(query)",
      "",
      "\t/// Query: List all ${2:entities}",
      "\trpc List${3:Entity}s(${6:ListRequest}) returns (${7:ListResponse})",
      "\t\t@graphql(query)",
      "",
      "\t/// Mutation: Create ${2:entity}",
      "\trpc Create${3:Entity}(${8:CreateRequest}) returns (${9:CreateResponse})",
      "\t\t@graphql(mutation)",
      "",
      "\t/// Subscription: Watch ${2:entity} updates",
      "\trpc Watch${3:Entity}(${10:WatchRequest}) returns (${11:WatchResponse})",
      "\t\t@graphql(subscription)",
      "}"
    ],
    "description": "Create a GraphQL service with queries, mutations, and subscriptions"
  },
  "Cross-Namespace Type Reference": {
    "prefix": "nsref",
    "body": [
      "${1:field}: ${2:com.example.namespace}.${3:Type}"
    ],
    "description": "Reference a type from another namespace"
  },
  "Complete File with Header": {
    "prefix": "file",
    "body": [
      "@typemux(\"1.0.0\")",
      "",
      "/// ${1:Description of this schema}",
      "namespace ${2:com.example.api}",
      "",
      "$0"
    ],
    "description": "Create a new TypeMux file with header and namespace"
  },
  "Entity with Timestamp Fields": {
    "prefix": "entity",
    "body": [
      "type ${1:Entity} {",
      "\tid: string = 1 @required",
      "\t${2:name}: ${3:string} = 2 @required",
      "\tcreatedAt: timestamp = 3 @required",
      "\tupdatedAt: timestamp = 4 @required",
      "}"
    ],
    "description": "Create an entity type with common timestamp fields"
  },
  "Request/Response Pair": {
    "prefix": "reqres",
    "body": [
      "type ${1:Operation}Request {",
      "\t${2:field}: ${3:string} @required",
      "}",
      "",
      "type ${1:Operation}Response {",
      "\t${4:result}: ${5:string} @required",
      "\tsuccess: bool @required",
      "}"
    ],
    "description": "Create a request/response type pair"
  },
  "Paginated List Response": {
    "prefix": "pagelist",
    "body": [
      "type ${1:Entity}ListResponse {",
      "\titems: []${1:Entity} @required",
      "\ttotal: int32 @required",
      "\tpage: int32 @required",
      "\tpageSize: int32 @required",
      "\thasMore: bool @required",
      "}"
    ],
    "description": "Create a paginated list response type"
  }
}
